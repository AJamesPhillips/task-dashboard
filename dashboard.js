// Generated by CoffeeScript 1.6.3
(function() {
  var getHash, handleError, handleFeed, updateCalendar;

  window.onAuthorize = function() {
    updateLoggedIn();
    $("#output").empty();
    return Trello.members.get("me", function(member) {
      var $cards, $noDueDate;
      $("#fullName").text(member.fullName);
      $cards = $("<div>").text("Loading Cards...").appendTo("#calendar");
      $noDueDate = $('<div>').appendTo('#no-due-date');
      return Trello.get("boards/UsP5zlas/cards", function(cards) {
        $noDueDate.empty();
        $('<h3>No due date</h3>').appendTo($noDueDate);
        window.calendarEvents.trello = [];
        $.each(cards, function(ix, card) {
          var link;
          if (card.due) {
            return window.calendarEvents.trello.push({
              id: card.url,
              title: card.name,
              url: card.url,
              start: new Date(card.due).getTime(),
              end: new Date(card.due).getTime(),
              "class": 'event-important'
            });
          } else {
            link = $("<a>").attr({
              href: card.url,
              target: "trello"
            }).addClass("card");
            return link.text(card.name).appendTo($noDueDate);
          }
        });
        return updateCalendar();
      });
    });
  };

  window.updateLoggedIn = function() {
    var isLoggedIn;
    isLoggedIn = Trello.authorized();
    $("#loggedout").toggle(!isLoggedIn);
    return $("#loggedin").toggle(isLoggedIn);
  };

  window.logout = function() {
    Trello.deauthorize();
    return updateLoggedIn();
  };

  window.getFeed = function() {
    var service;
    service = new google.gdata.calendar.CalendarService('arachnys');
    return service.getEventsFeed(FEED_URL, handleFeed, handleError);
  };

  window.calendarEvents = {};

  getHash = function(str) {
    var char, code, hash, _i, _len;
    hash = 0;
    if (str.length === 0) {
      return 0;
    }
    for (_i = 0, _len = str.length; _i < _len; _i++) {
      char = str[_i];
      code = char.charCodeAt(0);
      hash = ((hash << 5) - hash) + code;
      hash |= 0;
    }
    return hash;
  };

  handleFeed = function(feed) {
    var entries, entry, _i, _len;
    window.calendarEvents.gcal = [];
    entries = feed.entry;
    for (_i = 0, _len = entries.length; _i < _len; _i++) {
      entry = entries[_i];
      window.calendarEvents.gcal.push({
        id: getHash(entry.id.$t),
        title: entry.title.$t,
        url: entry.link[0].href,
        start: new Date(entry['gd$when'][0]['startTime']).getTime(),
        end: new Date(entry['gd$when'][0]['endTime']).getTime(),
        "class": 'event-info'
      });
    }
    return updateCalendar();
  };

  updateCalendar = function(events) {
    var flat, item, source, _i, _len, _ref;
    flat = [];
    _ref = window.calendarEvents;
    for (source in _ref) {
      events = _ref[source];
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        item = events[_i];
        item.id = i;
        flat.push(item);
      }
    }
    console.debug(flat);
    window.calendar.setOptions({
      events_source: flat
    });
    return window.calendar.view();
  };

  handleError = function(error) {
    return console.debug(error);
  };

  $(function() {
    var feedUrl, url;
    window.calendar = $('#calendar').calendar({
      first_day: 1,
      events_source: []
    });
    window.calendar.view('week');
    feedUrl = JSON.parse(localStorage.getItem('arachnysDashboardFeedUrl'));
    if (!feedUrl) {
      url = window.prompt('Please enter your Google Calendar feed URL');
      localStorage.setItem('arachnysDashboardFeedUrl', JSON.stringify(url));
      feedUrl = JSON.parse(localStorage.getItem('arachnysDashboardFeedUrl'));
    }
    if (feedUrl) {
      return $.getJSON("" + feedUrl + "?alt=json-in-script&callback=?", function(data) {
        return handleFeed(data.feed);
      });
    } else {
      return window.alert('Not possible to load Google Calendar data');
    }
  });

}).call(this);
