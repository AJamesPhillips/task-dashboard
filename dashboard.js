// Generated by CoffeeScript 1.6.3
(function() {
  var BOARD_ID, REFRESH_INTERVAL, getBoardCards, getCompletedCards, getHash, handleFeed, loadInitialData, updateCalendar, updateGcal;

  BOARD_ID = 'UsP5zlas';

  REFRESH_INTERVAL = 60000;

  window.calendarEvents = {};

  window.organizationMembers = {};

  window.boardLists = {};

  window.onAuthorize = function() {
    updateLoggedIn();
    $("#output").empty();
    return loadInitialData(getBoardCards);
  };

  getBoardCards = function(callback) {
    var $noDueDate;
    getCompletedCards();
    $noDueDate = $('#no-due-date');
    $('<div>').text('Loading...').appendTo($noDueDate);
    return Trello.get("boards/" + BOARD_ID + "/cards?filter=visible", function(cards) {
      var prevBoardName;
      $noDueDate.empty();
      $('<h3>No due date</h3>').appendTo($noDueDate);
      window.calendarEvents.trello = [];
      prevBoardName = null;
      $.each(cards, function(ix, card) {
        var boardName, cls, initials, link, m, membersString;
        initials = (function() {
          var _i, _len, _ref, _results;
          _ref = card.idMembers;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            m = _ref[_i];
            _results.push(window.organizationMembers[m].initials);
          }
          return _results;
        })();
        if (initials.length !== 0) {
          membersString = " [" + (initials.join(', ')) + "]";
        } else {
          membersString = "";
        }
        boardName = window.boardLists[card.idList].name;
        if (boardName === 'Complete') {
          cls = 'event-success event-fade';
        } else if (boardName === 'In progress') {
          cls = 'event-warning';
        } else {
          cls = 'event-important';
        }
        if (card.due) {
          return window.calendarEvents.trello.push({
            id: card.url,
            title: "" + card.name + membersString,
            url: card.url,
            start: new Date(card.due).getTime(),
            end: new Date(card.due).getTime(),
            "class": cls
          });
        } else {
          if (prevBoardName !== boardName) {
            $("<h4>").text("" + boardName).appendTo($noDueDate);
          }
          link = $("<a>").attr({
            href: card.url,
            target: "trello"
          }).addClass("card");
          link.text("" + card.name + membersString).appendTo($noDueDate);
          return prevBoardName = boardName;
        }
      });
      updateCalendar();
      return setTimeout(getBoardCards, REFRESH_INTERVAL);
    });
  };

  getCompletedCards = function() {
    return Trello.get("boards/" + BOARD_ID + "/cards?filter=closed&limit=100", function(cards) {
      var $complete, card, cardClosedDate, closedCards, daysAgoClosed, now, _i, _j, _len, _len1, _results;
      closedCards = [];
      now = new Date();
      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        card = cards[_i];
        cardClosedDate = new Date(card.dateLastActivity);
        daysAgoClosed = (now - cardClosedDate) / 1000 / 3600 / 24;
        if (daysAgoClosed <= 14.0) {
          closedCards.push(card);
        }
      }
      $complete = $('#completed-cards').empty();
      $("<h3>Completed/archived cards in last 14 days: " + closedCards.length + "</h3>").appendTo($complete);
      _results = [];
      for (_j = 0, _len1 = closedCards.length; _j < _len1; _j++) {
        card = closedCards[_j];
        _results.push($("<div class='col-xs-3 card'><a href='" + card.url + "'><i class='fa fa-trello'></i> " + card.name + "</a></div>").appendTo($complete));
      }
      return _results;
    });
  };

  loadInitialData = function(callback) {
    return Trello.members.get("me", function(member) {
      $("#fullName").text(member.fullName);
      return Trello.get("organizations/arachnys1/members?fields=all", function(members) {
        var _i, _len;
        for (_i = 0, _len = members.length; _i < _len; _i++) {
          member = members[_i];
          window.organizationMembers[member.id] = member;
        }
        return Trello.get("boards/" + BOARD_ID + "/lists", function(lists) {
          var list, _j, _len1;
          for (_j = 0, _len1 = lists.length; _j < _len1; _j++) {
            list = lists[_j];
            window.boardLists[list.id] = list;
          }
          return callback();
        });
      });
    });
  };

  window.updateLoggedIn = function() {
    var isLoggedIn;
    isLoggedIn = Trello.authorized();
    $("#loggedout").toggle(!isLoggedIn);
    return $("#loggedin").toggle(isLoggedIn);
  };

  window.logout = function() {
    Trello.deauthorize();
    return updateLoggedIn();
  };

  window.getFeed = function() {
    var service;
    service = new google.gdata.calendar.CalendarService('arachnys');
    return service.getEventsFeed(FEED_URL, handleFeed, handleError);
  };

  getHash = function(str) {
    var char, code, hash, _i, _len;
    hash = 0;
    if (str.length === 0) {
      return 0;
    }
    for (_i = 0, _len = str.length; _i < _len; _i++) {
      char = str[_i];
      code = char.charCodeAt(0);
      hash = ((hash << 5) - hash) + code;
      hash |= 0;
    }
    return hash;
  };

  handleFeed = function(feed) {
    var entries, entry, _i, _len;
    window.calendarEvents.gcal = [];
    entries = feed.entry;
    for (_i = 0, _len = entries.length; _i < _len; _i++) {
      entry = entries[_i];
      window.calendarEvents.gcal.push({
        id: getHash(entry.id.$t),
        title: "" + entry.title.$t + " on tech duty",
        url: entry.link[0].href,
        start: new Date(entry['gd$when'][0]['startTime']).getTime(),
        end: new Date(entry['gd$when'][0]['endTime']).getTime(),
        "class": 'event-info'
      });
    }
    return updateCalendar();
  };

  updateCalendar = function(events) {
    var flat, item, source, _i, _len, _ref;
    flat = [];
    _ref = window.calendarEvents;
    for (source in _ref) {
      events = _ref[source];
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        item = events[_i];
        item.id = i;
        flat.push(item);
      }
    }
    window.calendar.setOptions({
      events_source: flat
    });
    window.calendar2.setOptions({
      events_source: flat
    });
    window.calendar.view();
    return window.calendar2.view();
  };

  updateGcal = function() {
    var feedUrl, url;
    feedUrl = JSON.parse(localStorage.getItem('arachnysDashboardFeedUrl'));
    if (!feedUrl) {
      url = window.prompt('Enter Google Calendar feed URL for tech rota (should end with /full)');
      localStorage.setItem('arachnysDashboardFeedUrl', JSON.stringify(url));
      feedUrl = JSON.parse(localStorage.getItem('arachnysDashboardFeedUrl'));
    }
    if (feedUrl) {
      return $.getJSON("" + feedUrl + "?alt=json-in-script&callback=?", function(data) {
        handleFeed(data.feed);
        return setTimeout(updateGcal, REFRESH_INTERVAL);
      });
    } else {
      return window.alert('Not possible to load Google Calendar data');
    }
  };

  $(function() {
    window.calendar = $('#calendar').calendar({
      first_day: 1,
      events_source: []
    });
    window.calendar2 = $('#calendar2').calendar({
      first_day: 1,
      events_source: []
    });
    window.calendar.view('week');
    window.calendar2.view('week');
    window.calendar2.navigate('next');
    return updateGcal();
  });

}).call(this);
